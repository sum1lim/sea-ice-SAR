#!/usr/bin/env python3
import sys
import os
import gc
import shutil
import argparse
import numpy as np
import tensorflow as tf

from sea_ice_SAR.utils import decompose_filepath
from sea_ice_SAR.ML_tools import (
    config_parser,
    calculate_hidden_layer_size,
    process_data,
    learning_curve,
    tr_val_split,
)
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping

tf.get_logger().setLevel("ERROR")


def NN(hidden_layer_size, input_layer_size, output_layer_size):
    # Construct Neural Network
    model = Sequential()
    model.add(Dense(hidden_layer_size, input_dim=input_layer_size, activation="relu"))
    model.add(Dense(hidden_layer_size, input_dim=input_layer_size, activation="relu"))
    model.add(Dense(hidden_layer_size, input_dim=input_layer_size, activation="relu"))
    model.add(Dense(hidden_layer_size, input_dim=input_layer_size, activation="relu"))
    model.add(Dense(hidden_layer_size, input_dim=input_layer_size, activation="relu"))
    model.add(Dense(output_layer_size, activation="softmax"))

    model.compile(
        loss="categorical_crossentropy", optimizer="adam", metrics=["accuracy"]
    )
    model.summary()

    return model


def main(args):
    # Parse configuration
    (
        train_data,
        _,
        num_epochs,
        hidden_size,
        verbosity,
        K,
        _,
        min_num_points,
        smote,
        masks,
    ) = config_parser(args.ml_config)

    # Set up results directory
    config_dir, filename, _ = decompose_filepath(args.ml_config)
    result_dir = f"{args.result_dir}/{filename}"
    try:
        os.mkdir(result_dir)
    except FileExistsError:
        shutil.rmtree(result_dir)
        os.mkdir(result_dir)

    # log_file = open(f"{result_dir}/train.log", "w")
    # sys.stdout = log_file

    # Modify train dataset
    X_tr, Y_tr, _ = process_data(
        train_data,
        args.ml_config,
        regression=False,
        min_num_points=min_num_points,
        masks=masks,
    )

    # Define hidden layer size
    input_layer_size = X_tr.shape[1]
    output_layer_size = len(np.unique(Y_tr))
    if not hidden_size:
        hidden_size = calculate_hidden_layer_size(
            input_layer_size, output_layer_size, hidden_size
        )

    # K-fold classification
    tr_val_pairs = tr_val_split(K, X_tr, Y_tr)

    for iter, (train, validation) in enumerate(tr_val_pairs):
        print(
            f"*************************** Fold #: {iter+1} ***************************",
            file=sys.stdout,
        )
        checkpoint_path = f"{result_dir}/ckpt_{iter+1}"
        cp_callback = ModelCheckpoint(
            filepath=checkpoint_path, save_best_only=True, verbose=verbosity, mode="min"
        )
        es_callback = EarlyStopping(
            monitor="val_loss", mode="min", verbose=verbosity, patience=200
        )

        model = NN(hidden_size, input_layer_size, output_layer_size)

        # One-hot encoding of the label vector
        one_hot_Y_tr = to_categorical(Y_tr[train])
        one_hot_Y_val = to_categorical(Y_tr[validation])

        # Train the model
        model_summary = model.fit(
            x=X_tr[train],
            y=one_hot_Y_tr,
            epochs=num_epochs,
            batch_size=1024,
            verbose=verbosity,
            validation_data=(X_tr[validation], one_hot_Y_val),
            callbacks=[cp_callback, es_callback],
        )

        # Plot the learning curve
        learning_curve(model_summary.history, result_dir, iter)

        if K == 1:
            break

    # log_file.close()

    # garbage collection
    gc.collect()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--result-dir",
        type=str,
        help="Directory path to store the results",
    )
    parser.add_argument(
        "--ml-config",
        nargs="+",
        type=str,
        help="YAML file containing the configuration for deep learning",
    )

    args = parser.parse_args()
    if type(args.ml_config) == list:
        ml_configs = args.ml_config[:]
        for ml_config in ml_configs:
            args.ml_config = ml_config
            main(args)
    else:
        main(args)
