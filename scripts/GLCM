#!/usr/bin/env python3
import argparse
import sys
import pandas
import yaml
import numpy as np

from tqdm import tqdm
from sea_ice_SAR.utils import decompose_filepath, output_tif
from sea_ice_SAR.data_processing import tr_min_max
from osgeo import gdal
from skimage.feature import greycomatrix, greycoprops


def main(args):
    df = pandas.read_csv(args.input, header=0, index_col=False)

    stream = open(args.config, "r")
    config_dict = yaml.safe_load(stream)

    files_dir = {column: config_dict["features"][column] for column in args.columns}

    img_dir = {}
    for dir in df["src_dir"].unique():
        for column, filenames in files_dir.items():
            for filename in filenames:
                try:
                    ds = gdal.Open(f"{dir}/{filename}.tif")
                    band = ds.GetRasterBand(1)
                    img = band.ReadAsArray()
                except AttributeError as e:
                    continue

                img_dir[(dir, column)] = (img * 255).astype(int)

    GLCM_products = [
        "contrast",
        "dissimilarity",
        "homogeneity",
        "ASM",
        "energy",
        "correlation",
    ]

    for column in args.columns:
        for gp in GLCM_products:
            df[f"{column}_{gp}"] = np.nan

        for idx, src_dir in enumerate(tqdm(df["src_dir"])):
            image = img_dir[(src_dir, column)]

            PATCH_SIZE = 7
            bottom_thresh = image.shape[0] - 6
            right_thresh = image.shape[1] - 6

            row = df["row"][idx]
            col = df["col"][idx]
            patch = image[row : row + PATCH_SIZE, col : col + PATCH_SIZE]
            glcm = greycomatrix(
                patch,
                distances=[1],
                angles=[
                    0,
                    np.pi / 8,
                    2 * np.pi / 8,
                    3 * np.pi / 8,
                    4 * np.pi / 8,
                    5 * np.pi / 8,
                    6 * np.pi / 8,
                    7 * np.pi / 8,
                ],
                levels=256,
            )

            for gp in GLCM_products:
                df[f"{column}_{gp}"][idx] = sum(greycoprops(glcm, gp)[0])

    output_dir, filename, _ = decompose_filepath(args.input)
    df.to_csv(f"{output_dir}/{filename}_GLCM.csv", index=False)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument("--input", type=str, help="Input CSV file")
    parser.add_argument(
        "--config", type=str, help="Configuration file used to creat the input CSV file"
    )
    parser.add_argument("--columns", type=str, nargs="+", help="Input CSV file")

    args = parser.parse_args()
    if type(args.columns) == str:
        args.columns = [args.columns]

    main(args)
