#!/usr/bin/env python3
import argparse
import numpy as np

from sea_ice_SAR.data_processing import decompose_filepath
from osgeo import gdal
from skimage.feature import greycomatrix, greycoprops


def output_tif(output_filepath, image):

    [rows, cols] = image.shape
    driver = gdal.GetDriverByName("GTiff")
    outdata = driver.Create(
        output_filepath,
        cols,
        rows,
        1,
        gdal.GDT_Float64,
    )
    outdata.SetGeoTransform(ds.GetGeoTransform())
    outdata.SetProjection(ds.GetProjection())
    outdata.GetRasterBand(1).WriteArray(image)
    outdata.FlushCache()
    outdata = None
    band = None
    ds = None


def main(args):
    images = {}
    tr_max = None
    tr_min = None
    for f in args.tr_images:
        ds = gdal.Open(f)
        band = ds.GetRasterBand(1)
        image = band.ReadAsArray()
        if tr_max == None and tr_min == None:
            tr_max = np.max(image)
            tr_min = np.min(image)
        else:
            if tr_max < np.max(image):
                tr_max = np.max(image)
            if tr_min > np.min(image):
                tr_min = np.min(image)

        images[f] = image

    for f in args.te_images:
        ds = gdal.Open(f)
        band = ds.GetRasterBand(1)
        image = band.ReadAsArray()
        images[f] = image

    for f, img in images.items():
        image = ((img - tr_min) / (tr_max - tr_min) * 255).astype(int)

        PATCH_SIZE = 7
        bottom_thresh = image.shape[0] - 6
        right_thresh = image.shape[1] - 6

        patches = {
            (row, col): (image[row : row + PATCH_SIZE], image[col : col + PATCH_SIZE])
            for row in range(0, bottom_thresh)
            for col in range(0, right_thresh)
        }

        contrast_img = np.zeros(image.shape)
        dissimilarity_img = np.zeros(image.shape)
        homogeneity_img = np.zeros(image.shape)
        ASM_img = np.zeros(image.shape)
        energy_img = np.zeros(image.shape)
        correlation_img = np.zeros(image.shape)

        for key, patch in patches.items():
            glcm = greycomatrix(
                patch,
                distances=[1],
                angles=[
                    0,
                    np.pi / 8,
                    2 * np.pi / 8,
                    3 * np.pi / 8,
                    4 * np.pi / 8,
                    5 * np.pi / 8,
                    6 * np.pi / 8,
                    7 * np.pi / 8,
                ],
                levels=256,
            )

            row = key[0]
            col = key[1]

            contrast_img[row + 3][col + 3] = greycoprops(glcm, "contrast")
            dissimilarity_img[row + 3][col + 3] = greycoprops(glcm, "dissimilarity")
            homogeneity_img[row + 3][col + 3] = greycoprops(glcm, "homogeneity")
            ASM_img[row + 3][col + 3] = greycoprops(glcm, "ASM")
            energy_img[row + 3][col + 3] = greycoprops(glcm, "energy")
            correlation_img[row + 3][col + 3] = greycoprops(glcm, "correlation")

        output_dir, filename, _ = decompose_filepath(file)
        output_tif(f"{output_dir}/{filename}_contrast.tif", contrast_img)
        output_tif(f"{output_dir}/{filename}_dissimilarity.tif", dissimilarity_img)
        output_tif(f"{output_dir}/{filename}_homogeniety.tif", homogeneity_img)
        output_tif(f"{output_dir}/{filename}_ASM.tif", ASM_img)
        output_tif(f"{output_dir}/{filename}_energy.tif", energy_img)
        output_tif(f"{output_dir}/{filename}_correlation.tif", correlation_img)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--tr-images", type=str, nargs="+", help="Training data image(s)"
    )
    parser.add_argument("--te-images", type=str, help="Test data image(s)")
    args = parser.parse_args()

    if type(args.tr_images) == str:
        args.tr_images = [args.tr_images]
    if type(args.te_images) == str:
        args.te_images = [args.te_images]

    main(args)
