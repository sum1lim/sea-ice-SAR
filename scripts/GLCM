#!/usr/bin/env python3
import argparse
import numpy as np

from tqdm import tqdm
from sea_ice_SAR.utils import decompose_filepath, output_tif
from sea_ice_SAR.data_processing import tr_min_max
from osgeo import gdal
from skimage.feature import greycomatrix, greycoprops


def main(args):
    tr_min, tr_max = tr_min_max(args.tr_images)

    for f in args.tr_images + args.te_images:
        print(f"Processing {f}")
        ds = gdal.Open(f)
        band = ds.GetRasterBand(1)
        img = band.ReadAsArray()

        image = ((img - tr_min) / (tr_max - tr_min) * 255).astype(int)

        PATCH_SIZE = 7
        bottom_thresh = image.shape[0] - 6
        right_thresh = image.shape[1] - 6

        contrast_img = np.zeros(image.shape)
        dissimilarity_img = np.zeros(image.shape)
        homogeneity_img = np.zeros(image.shape)
        ASM_img = np.zeros(image.shape)
        energy_img = np.zeros(image.shape)
        correlation_img = np.zeros(image.shape)

        for row in tqdm(range(0, bottom_thresh)):
            for col in range(0, right_thresh):
                patch = image[row : row + PATCH_SIZE, col : col + PATCH_SIZE]
                glcm = greycomatrix(
                    patch,
                    distances=[1],
                    angles=[
                        0,
                        np.pi / 8,
                        2 * np.pi / 8,
                        3 * np.pi / 8,
                        4 * np.pi / 8,
                        5 * np.pi / 8,
                        6 * np.pi / 8,
                        7 * np.pi / 8,
                    ],
                    levels=256,
                )

                contrast_img[row + 3][col + 3] = sum(greycoprops(glcm, "contrast")[0])
                dissimilarity_img[row + 3][col + 3] = sum(
                    greycoprops(glcm, "dissimilarity")[0]
                )
                homogeneity_img[row + 3][col + 3] = sum(
                    greycoprops(glcm, "homogeneity")[0]
                )
                ASM_img[row + 3][col + 3] = sum(greycoprops(glcm, "ASM")[0])
                energy_img[row + 3][col + 3] = sum(greycoprops(glcm, "energy")[0])
                correlation_img[row + 3][col + 3] = sum(
                    greycoprops(glcm, "correlation")[0]
                )

        output_dir, filename, _ = decompose_filepath(f)
        output_tif(f"{output_dir}/{filename}_contrast.tif", contrast_img, ds)
        output_tif(f"{output_dir}/{filename}_dissimilarity.tif", dissimilarity_img, ds)
        output_tif(f"{output_dir}/{filename}_homogeniety.tif", homogeneity_img, ds)
        output_tif(f"{output_dir}/{filename}_ASM.tif", ASM_img, ds)
        output_tif(f"{output_dir}/{filename}_energy.tif", energy_img, ds)
        output_tif(f"{output_dir}/{filename}_correlation.tif", correlation_img, ds)

        band = None
        ds = None


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--tr-images", type=str, nargs="+", help="Training data image(s)"
    )
    parser.add_argument("--te-images", type=str, help="Test data image(s)")
    args = parser.parse_args()

    if type(args.tr_images) == str:
        args.tr_images = [args.tr_images]
    if type(args.te_images) == str:
        args.te_images = [args.te_images]

    main(args)
