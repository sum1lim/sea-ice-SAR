#!/usr/bin/env python3
import argparse
from osgeo import gdal
from scipy import ndimage
from skimage import feature
from sea_ice_SAR.utils import decompose_filepath


def main(args):
    ds = gdal.Open(args.input)
    band = ds.GetRasterBand(args.band)
    band_arr = band.ReadAsArray()

    if args.method == "sobel":
        processed = ndimage.sobel(band_arr)
    if args.method == "canny":
        processed = feature.canny(band_arr)

    dir, filename, _ = decompose_filepath(args.input)

    tmp_ds = gdal.GetDriverByName("MEM").CreateCopy(
        f"{dir}/{filename}_{args.method}.tif", ds, 0
    )
    tmp_ds.AddBand()
    tmp_ds.GetRasterBand(ds.RasterCount + 1).WriteArray(processed)

    dst_ds = gdal.GetDriverByName("GTiff").CreateCopy(
        f"{dir}/{filename}_{args.method}.tif", tmp_ds, 0
    )
    dst_ds.SetGeoTransform(ds.GetGeoTransform())
    dst_ds.SetProjection(ds.GetProjection())
    dst_ds.GetRasterBand(1).WriteArray(processed)
    tmp_ds.FlushCache()
    dst_ds.FlushCache()
    tmp_ds = None
    dst_ds = None

    # [rows, cols] = band_arr.shape
    # driver = gdal.GetDriverByName("GTiff")
    # outdata = driver.Create(
    #     f"{dir}/{filename}_{args.method}.tif",
    #     cols,
    #     rows,
    #     1,
    #     gdal.GDT_Float64,
    # )
    # outdata.SetGeoTransform(ds.GetGeoTransform())
    # outdata.SetProjection(ds.GetProjection())
    # outdata.GetRasterBand(1).WriteArray(processed)
    # outdata.FlushCache()
    # outdata = None
    # band = None
    # ds = None


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--input",
        type=str,
        help="Input file path",
    )
    parser.add_argument(
        "--method",
        type=str,
        help="Edge detection method ['SOBEL', 'canny']",
        choices=["SOBEL", "canny"],
    )
    parser.add_argument(
        "--band",
        type=int,
        help="Band to perform edge detection on",
    )

    args = parser.parse_args()

    main(args)
