#!/usr/bin/env python3
import argparse
import sys
import os
import yaml
from sea_ice_SAR.utils import decompose_filepath, output_tif
from sea_ice_SAR.data_processing import tr_min_max
from osgeo import gdal


def main(args):
    try:
        stream = open(args.config, "r")
        config_dict = yaml.safe_load(stream)
    except:
        print("ERROR: Configuration file not provided", file=sys.stderr)

    tr_cfg = config_dict["train_data"]
    te_cfg = config_dict["test_data"]
    output_dirs = config_dict["output_dir"]

    min_max_li = [tr_min_max(tr_data) for tr_data in tr_cfg]

    feature_files = tr_cfg[:]
    for idx, _ in enumerate(te_cfg):
        feature_files[idx] += te_cfg[idx]

    for output_dir in output_dirs:
        try:
            os.mkdir(output_dir)
        except FileExistsError:
            continue

    for f_idx, f_li in enumerate(feature_files):
        for output_idx, f in enumerate(f_li):
            _, filename, _ = decompose_filepath(f)
            ds = gdal.Open(f)
            band = ds.GetRasterBand(1)
            band_arr = band.ReadAsArray()
            min = min_max_li[f_idx][0]
            max = min_max_li[f_idx][1]

            normalized_arr = (band_arr - min) / (max - min)

            output_tif(f"{output_dirs[output_idx]}/{filename}.tif", normalized_arr, ds)

            band = None
            ds = None


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--config",
        type=str,
        help="Configuration file to create datasets",
    )

    args = parser.parse_args()

    main(args)
